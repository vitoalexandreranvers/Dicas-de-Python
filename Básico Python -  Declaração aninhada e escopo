# Dicas-de-Python
Dicas de programação


•	DECLARAÇÕES ANINHADAS E ESCOPO

	Agora que passamos a escrever nossas próprias funções, é importante entender como o python lida com os nomes das variáveis que você atribui. Quando você cria um nome de variável em python, o nome é armazenado em um namespace. Nomes de variáveis também tem escopo. O escopo determina a visibilidade desse nome de variável para outras partes do seu código.

Comece com uma rápida experiência de pensamento, imagine o seguinte código:
X = 25
def printer():
    X = 50
    Return X

	O que você imagina que printer() printará? 25 ou 50? Qual o resultado da impressão X? 25 ou 50?
Print(X)
25
Print(printer())
50

	Impressionante!! Mas como o python sabe qual X você está se referindo no seu código? Este é o lugar onde a ideia de escopo vem. Python tem um conjunto de regras que segue para decidir quais variáveis (como X neste caso) você está fazendo referência em seu código. Vamos investigar as regras:

	Essa ideia de escopo em seu código é muito importante entender pra atribuir e chamar nomes de variáveis adequadamente.
	Em termos simples, a ideia de escopo pode ser descrita por 3 regras gerais:
1 – as atribuições de nomes criam ou alteram nomes locais por padrão
2 – existem 4 possiveis tipos de escopos. São eles:
•	Local
•	Enclosing functions
•	Global
•	Built-in
3 – os nomes declarados em declarações globais e não locais mapeiam nomes atribuídos para preencher módulos e escopos de função.

	A declaração em #2 acima pode ser definida pela regra LEGB.

- REGRA LEGB
	L – local – nomes atribuídos de qualquer forma dentro de uma função (def ou lambda) e declarações não globais nessa função.
	E – Enclosing function locals – nome no escopo local de todas e quaisquer funções encapsuladas (def ou lambda), de dentro para fora.
	G – Global (modulo)-  nomes atribuídos no nível superior de um arquivo de módulo, ou declarados como global em um def dentro do arquivo.
	B – Built-in (python) – nomes pré-atribuidos no módulo: open, range, SyntaxError,...

-LOCAL
def local():
# x é local aqui
X = 10
Print(X)

Local()
Imprime na tela = 10

	Podemos usar a função locals() para retornar um dicionário com todas as variáveis locais
def local():
a = 100
Print(locals())

Local()
Imprime na tela = {‘a’ : 100}








- ENCLOSING FUNCTION LOCALS
	Isso ocorre quando temos uma função dentro de uma função (funções aninhadas).

Name = ‘ this is a global name’

Def greet():
	Name = ‘sammy’
     Def  hello():
             Print(‘hello’ + Name)

     hello()
greet()
print(Name)

#imprime na tela
Hello Sammy
This is a global name

	Observe como sammy foi usado, porque a função hello() foi anexada dentro da função de saudação!!

- GLOBAL
	Variáveis globais são visíveis em todo o código. Podemos usar a função globals() para retornar um dicionário com todas as variáveis globais.

Var_global = ‘variável global’
Print(var_global)

Print(globals())

-  BUILT-IN
	Built-in são os nomes de funções incorporados no python (não substitua-os !)

Len
<built-in function len>

 - VARIAVEIS LOCAIS
	Quando você declara variáveis dentro de uma definição de função, elas não estão relacionadas de nenhuma maneira a outras variáveis com os mesmos nomes usados fora da função. Ou seja, os nomes de variáveis são locais para a função. Isso é chamado de escopo da variável. Todas as variáveis tem o escopo do bloco em que são declarados a partir do ponto de definição do nome.






Exemplo
X = 50
def func(x):
	print(‘x is ‘, x)
              x = 2
	print(‘changed local x to’ , x)

func(x)
print(‘x is still’ , x)

	Na primeira vez que imprimimos o valor do nome x com a primeira linha no corpo da função, o python usa o valor do parâmetro declarado no bloco principal, acima da definição da função.
	Em seguida, atribuímos o valor 2 a x. O nome x é local para nossa função. Então, quando mudamos o valor de x na função, o x definido no bloco principal permanece inalterado.
	Com a ultima declaração de impressão, mostramos o valor de x conforme definido no bloco principal, confirmando assim que ele não é afetado pela atribuição local dentro da função anteriormente chamada.

- A DECLARAÇÃO GLOBAL
	Se você deseja atribuir um valor a um nome definido no nível superior do programa ( ou seja, não dentro de qualquer tipo de escopo, como funções ou classes), então você deve dizer ao python que o nome não é local, mas é global. Fazemos isso usando a declaração global. É impossível atribuir um valor a uma variável definida fora de uma função sem a declaração global.
	Você pode usar os valores de tais variáveis definidas fora da função (assumindo que não há nenhuma variável com o mesmo nome dentro da função). No entanto, isso não é encorajado e deve ser evitado, uma vez que não fica claro para o leitor do programa como a definição daquela variável. O uso da declaração global torna claro que a variável é definida em um bloco mais externo.

Exemplo:
X = 50
Def func()
	Global x 
	Print(‘this function is now using the global x !’)
	Print(‘because of global x is:’ , x )
	X = 2
	Print(‘ Ran func(), changed global x to’ , x)
Print (‘before calling func(), x is : ‘ , x)
Func()
Print(‘value of x (outside of func()) is: ‘ , x)

	A declaração global é usada para declarar que x é uma variável global, portanto, quando atribuímos um valor a x dentro da função, essa alteração é refletida quando usamos o valor de x no bloco principal.
	Você pode especificar mais de uma variável global usando a mesma declaração global separando-as por virgula, exemplo: global x,y,z

Conclusão
	Você deve agora ter um bom entendimento sobre o escopo. Uma última menção é que você pode usar as funções global() e local() para verificar quais são suas variáveis locais e globais.
	Outra coisa a ter em mente é que tudo em python é um objeto! Eu posso atribuir variáveis com funções como eu posso com números ou strings !

Exercícios
1 – crie uma variável qualquer e encontre o valor dela usando a função global()
